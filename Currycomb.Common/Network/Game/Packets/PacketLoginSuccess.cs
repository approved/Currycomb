using System;
using System.IO;
using System.Threading.Tasks;
using Currycomb.Common.Extensions;

namespace Currycomb.Common.Network.Game.Packets
{
    public record PacketLoginSuccess(Guid Uuid, String Username) : IGamePacket
    {
        public void Write(BinaryWriter writer)
        {
            writer.Write(Uuid.ToByteArray());
            writer.Write(Username);
        }
    }

    public record PacketEncryptionRequest(
        string ServerId,   // Empty on 1.7.x and onwards.
        byte[] PublicKey,  // The server's public key in bytes.
        byte[] VerifyToken // A sequence of random bytes generated by the server. Always 4 for Notchian servers.
    ) : IGamePacket
    {
        public void Write(BinaryWriter writer)
        {
            writer.Write(ServerId);
            writer.Write7BitEncodedInt(PublicKey.Length);
            writer.Write(PublicKey);
            writer.Write7BitEncodedInt(VerifyToken.Length);
            writer.Write(VerifyToken);
        }
    }


    public record PacketEncryptionResponse(
        byte[] SharedSecret, // The AES secret.
        byte[] VerifyToken   // A sequence of random bytes generated by the server. Always 4 for Notchian servers.
    ) : IGamePacket
    {
        public void Write(BinaryWriter writer)
        {
            writer.Write7BitEncodedInt(SharedSecret.Length);
            writer.Write(SharedSecret);
            writer.Write7BitEncodedInt(VerifyToken.Length);
            writer.Write(VerifyToken);
        }

        public static async Task<PacketEncryptionResponse> ReadAsync(Stream stream) => new(
            await stream.ReadBytesAsync(await stream.Read7BitEncodedIntAsync()),
            await stream.ReadBytesAsync(await stream.Read7BitEncodedIntAsync())
        );
    }
}
